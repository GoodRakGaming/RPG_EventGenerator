# RPG Event Generator - Контекст проекта v2.0

## 1. Обзор проекта

### Описание
RPG Event Generator - система генерации событий предыстории персонажей для настольной ролевой игры, реализованная на VBA в Excel. Поддерживает множественные классы персонажей с уникальными путями развития и системой внутренних бросков для детализации событий.

### Версия
2.0 (планируемая) - с разделением на модули и поддержкой базового генератора

### Основные возможности
- Генерация событий по одному или полной истории персонажа
- Поддержка уникальных (неповторяющихся) событий
- Система внутренних бросков (ROLL, SELECT, IF) для детализации
- Валидация конфигурации с логированием ошибок
- Кэширование диапазонов для производительности
- Поддержка частично реализованных классов

## 2. Архитектура системы

### 2.1 Текущие модули

**ValidationLogger.bas** - Система валидации и логирования
- Централизованная коллекция ошибок с типизацией (КРИТИЧНО/ВНИМАНИЕ/КОНФИГУРАЦИЯ)
- Кэширование диапазонов с таймаутом (30 минут)
- Автоматическое создание листа "Ошибки_Валидации"
- Проверка существования листов и именованных диапазонов

**RPG_EventGenerator.bas** - Основной модуль генерации
- Точка входа (Main)
- Управление состоянием генератора
- История персонажа с отслеживанием уникальных событий
- Универсальная система внутренних бросков
- Интеграция с ValidationLogger

**ClassConfiguration.bas** - Конфигурация классов (требуется создать)
- Централизованное хранение настроек всех классов
- Функция GetClassConfig возвращает структуру ClassConfig
- Флаг IsFullyImplemented для каждого класса

### 2.2 Планируемые модули

**BaseGenerator.bas** - Базовый генератор
- Универсальная генерация для нереализованных классов
- Минимальный набор событий
- Упрощенная валидация

**EventProcessor.bas** - Процессор событий
- Логика обработки одного события
- Система внутренних бросков
- Работа с уникальностью

## 3. Алгоритм генерации

### 3.1 Инициализация
1. **Main()** - точка входа
2. Инициализация систем:
   - Randomize (генератор случайных чисел)
   - InitializeValidation (система валидации)
   - InitializeCharacterHistory (история персонажа)

### 3.2 Загрузка конфигурации
1. Чтение класса из UI (ячейка B2)
2. Получение конфигурации через GetClassConfig
3. Проверка полноты реализации (IsFullyImplemented)

### 3.3 Выбор режима генерации
```
IF класс полностью реализован THEN
    → Полная валидация
ELSE
    Читаем флаг использования базового генератора
    IF использовать базовый THEN
        → BaseGenerator.bas
    ELSE
        → Продолжить с частичной валидацией
    END IF
END IF
```

### 3.4 Валидация

**Критические проверки (обязательные):**
- Лист данных класса
- Диапазон `Порог_Опасности_[класс]`
- Диапазон `Опасность_[класс]`
- Диапазон `Путь_[класс]`

**Опциональные проверки:**
- Таблицы событий (имена = уникальные значения из `Путь_[класс]`)
- Таблицы описаний опасностей
- Дополнительные данные класса

### 3.5 Режимы генерации

**Одиночное событие:**
- Однократный вызов GenerateEnhancedEvent_SaveHistory
- Без повторной валидации при последующих вызовах

**Полная история:**
- Цикл по десятилетиям жизни персонажа
- Единая валидация в начале
- Накопление истории уникальных событий

### 3.6 Генерация события

#### 3.6.1 Генерация опасности
```
1. Чтение пути из UI (B23)
2. Бросок d100
3. Сравнение с порогом из Порог_Опасности_[класс]
4. IF опасность THEN
   a. Бросок d10 по таблице Опасность_[класс]
   b. Проверка уникальности опасности
   c. IF уникальная И уже использована THEN
      - Переброс (до 50 попыток)
   d. Проверка таблицы описания опасности
   e. IF есть команды в колонке C THEN
      - Выполнение внутренних бросков
   f. Запись обработанной опасности
END IF
```

#### 3.6.2 Генерация типа события
```
LOOP (max 50 попыток)
    1. Бросок d10 по таблице Путь_[класс]
    2. Получение базового события
    3. Проверка уникальности
    4. IF уникальное И уже использовано THEN
        CONTINUE LOOP
    5. Проверка наличия таблицы событий
    6. IF есть таблица THEN
        a. Получение команд из колонки D
        b. Выполнение внутренних бросков
    7. Сохранение события
    8. EXIT LOOP
END LOOP
IF попытки исчерпаны THEN
    Fallback: "Спокойное десятилетие"
```

### 3.7 Система внутренних бросков

**Поддерживаемые команды:**
- `ROLL:XdY[+/-Z]` - бросок кубиков
- `SELECT:условие` - выбор на основе результата
- `IF:условие:результат` - условное добавление текста

**Примеры:**
```
ROLL:1d10|SELECT:1-3:короткий|4-6:средний|7-10:длинный
ROLL:1d6|IF:EVEN:и активный|IF:ODD:но пассивный
```

## 4. Структура данных

### 4.1 Конфигурация класса (ClassConfig)
```vba
Private Type ClassConfig
    className As String           ' Имя класса
    DataSheetName As String       ' Лист с данными
    EventSuffix As String         ' Суффикс таблиц (_маг, _ведьмак)
    PrefixOpasnost As String      ' Префикс диапазона опасностей
    PrefixPorog As String         ' Префикс диапазона порогов
    PrefixPath As String          ' Префикс диапазона путей
    Paths() As PathInfo          ' Массив путей
    IsFullyImplemented As Boolean ' Флаг полной реализации
End Type
```

### 4.2 Результат события (EventResult)
```vba
Private Type EventResult
    BaseEvent As String           ' Базовое событие
    DetailedDescription As String ' Полное описание
    SubRolls As String           ' Информация о бросках
    IsUnique As Boolean          ' Флаг уникальности
    RequiresReroll As Boolean    ' Требует переброса
End Type
```

### 4.3 Именованные диапазоны

**Обязательные для класса:**
- `Путь_[класс]` - таблица путей развития (5 колонок: ключ + 4 пути)
- `Опасность_[класс]` - таблица опасностей (5 колонок)
- `Порог_Опасности_[класс]` - пороги для каждого пути (2 колонки)

**Опциональные:**
- `[ИмяСобытия]_[суффикс]` - детальные таблицы событий
- `[ИмяОпасности]_описание` - детальные описания опасностей

## 5. Известные проблемы и решения

### 5.1 Исправленные проблемы
- ✅ Ошибка 438 при работе с Collection в VBA
- ✅ Безопасная обработка отсутствующих диапазонов
- ✅ Корректное управление жизненным циклом объектов

### 5.2 Текущие ограничения
- VBA не поддерживает современные структуры данных
- Ограничения Excel на размер именованных диапазонов
- Потенциальные проблемы производительности при большом количестве событий
- Жесткая связанность модулей (планируется исправить)

## 6. План развития

### Фаза 1: Архитектурная декомпозиция (Приоритет 1)

**1.1 Создание ClassConfiguration.bas**
- [ ] Вынести все GetClassConfig в отдельный модуль
- [ ] Добавить флаг IsFullyImplemented
- [ ] Централизовать настройки всех классов

**1.2 Создание BaseGenerator.bas**
- [ ] Реализовать универсальный генератор
- [ ] Добавить базовые таблицы событий
- [ ] Интегрировать с основным потоком

**1.3 Создание EventProcessor.bas**
- [ ] Вынести логику обработки одного события
- [ ] Отделить систему внутренних бросков
- [ ] Оптимизировать работу с уникальностью

### Фаза 2: Оптимизация валидации (Приоритет 2)

**2.1 Умная валидация**
- [ ] Кэширование результатов валидации
- [ ] Валидация только измененных элементов
- [ ] Режимы валидации (FULL/PARTIAL/NONE)

**2.2 Динамическая генерация списка таблиц**
- [ ] Автоматический поиск таблиц событий
- [ ] Валидация только используемых таблиц

### Фаза 3: Расширение функциональности (Приоритет 3)

**3.1 Новые классы**
- [ ] Завершить класс "Ведьмак"
- [ ] Добавить новые классы через конфигурацию

**3.2 Улучшения UI**
- [ ] Добавить выбор режима генерации в UI
- [ ] Прогресс-бар для полной генерации
- [ ] Предпросмотр конфигурации класса

**3.3 Расширенные команды бросков**
- [ ] Поддержка переменных между бросками
- [ ] Более сложные условия
- [ ] Вложенные команды

## 7. Соглашения и стандарты

### Именование
- Модули: PascalCase (EventProcessor.bas)
- Функции/Sub: PascalCase (GenerateEvent)
- Переменные: camelCase (currentEvent)
- Константы: UPPER_SNAKE_CASE (MAX_ATTEMPTS)

### Обработка ошибок
- Всегда использовать On Error GoTo ErrHandler
- Логировать через ValidationLogger
- Graceful degradation при некритичных ошибках

### Документация
- Заголовок модуля с описанием и зависимостями
- Комментарии для сложной логики
- Примеры использования для публичных функций

## 8. Тестирование

### Тестовые сценарии
1. Генерация одного события для полностью реализованного класса
2. Генерация полной истории (проверка уникальности)
3. Fallback на базовый генератор
4. Обработка отсутствующих таблиц
5. Валидация с различными уровнями ошибок

### Метрики производительности
- Время первой генерации (с валидацией): < 2 сек
- Время последующих генераций: < 0.5 сек
- Время полной истории (10 событий): < 5 сек